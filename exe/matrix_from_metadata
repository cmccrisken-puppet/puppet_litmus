#!/usr/bin/env ruby
# frozen_string_literal: true

# this script creates a build matrix for github actions from the claimed supported platforms and puppet versions in metadata.json

require 'json'

IMAGE_TABLE = {
  'RedHat-6' => 'rhel-6',
  'RedHat-7' => 'rhel-7',
  'RedHat-8' => 'rhel-8',
  'SLES-12' => 'sles-12',
  'SLES-15' => 'sles-15',
  'Windows-2012 R2' => 'windows-2012-r2-core',
  'Windows-2016' => 'windows-2016',
  'Windows-2019' => 'windows-2019-core',
}.freeze

DOCKER_PLATFORMS = [
  'CentOS-6',
  'CentOS-7',
  'CentOS-8',
  'Debian-10',
  'Debian-8',
  'Debian-9',
  'OracleLinux-6',
  'OracleLinux-7',
  'Scientific-6',
  'Scientific-7',
  'Ubuntu-14.04',
  'Ubuntu-16.04',
  'Ubuntu-18.04',
  'Ubuntu-20.04',
].freeze

# This table uses the latest version in each collection for accurate
# comparison when evaluating puppet requirements from the metadata
COLLECTION_TABLE = {
  '5.5.22' => { collection: 'puppet5', ruby_ver: '2.5' },
  '6.19.1' => { collection: 'puppet6', ruby_ver: '2.5' },
  '7.0.0' => { collection: 'puppet7-nightly', ruby_ver: '2.7' }
}.freeze

matrix = {
  platform: [],
  collection: []
}

spec_matrix = []

metadata = JSON.parse(File.read('metadata.json'))
# Set platforms based on declared operating system support
metadata['operatingsystem_support'].sort_by { |a| a['operatingsystem'] }.each do |sup|
  os = sup['operatingsystem']
  sup['operatingsystemrelease'].sort_by { |a| a.to_i }.each do |ver|
    image_key = "#{os}-#{ver}"
    if IMAGE_TABLE.key? image_key
      matrix[:platform] << IMAGE_TABLE[image_key]
    elsif DOCKER_PLATFORMS.include? image_key
      puts "Expecting #{image_key} test using docker on travis"
    else
      puts "::warning::Cannot find image for #{image_key}"
    end
  end
end

# Set collections based on puppet version requirements
if metadata.key?('requirements') && metadata['requirements'].length.positive?
  metadata['requirements'].each do |req|
    next unless req.key?('name') && req.key?('version_requirement') && req['name'] == 'puppet'

    ver_regexp = %r{^([>=<]{1,2})\s*([\d.]+)\s+([>=<]{1,2})\s*([\d.]+)$}
    match = ver_regexp.match(req['version_requirement'])
    if match.nil?
      puts "::warning::Didn't recognize version_requirement '#{req['version_requirement']}'"
      break
    end

    cmp_one, ver_one, cmp_two, ver_two = match.captures
    reqs = ["#{cmp_one} #{ver_one}", "#{cmp_two} #{ver_two}"]

    COLLECTION_TABLE.each do |key, val|
      if Gem::Requirement.create(reqs).satisfied_by?(Gem::Version.new(key))
        matrix[:collection] << val['collection']
        spec_matrix << { puppet_version: key, ruby_version: "~> #{val[:ruby_ver]}" }
      end
    end
  end
end

# Set to defaults (all collections) if no matches are found
if matrix[:collection].empty?
  matrix[:collection] = COLLECTION_TABLE.each { | params | params['collection'] }
end

# Just to make sure there aren't any duplicates
matrix[:platform] = matrix[:platform].uniq.sort
matrix[:collection] = matrix[:collection].uniq.sort
spec_matrix = spec_matrix.uniq

puts "::set-output name=matrix::#{JSON.generate(matrix)}"
puts "::set-output name=spec_matrix::#{spec_matrix}"

puts "Created matrix with #{matrix[:platform].length * matrix[:collection].length} cells."
